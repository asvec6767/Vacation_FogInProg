from math import cos, asin, sqrt, pi
from random import randrange
import places_db_query as places
import gpt
import geocoder

#–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã –•–∞–≤–µ—Ä—Å–∏–Ω–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
def _distance(lat1, lon1, lat2, lon2):
    r = 6371 # km
    p = pi / 180
    a = 0.5 - cos((lat2-lat1)*p)/2 + cos(lat1*p) * cos(lat2*p) * (1-cos((lon2-lon1)*p))/2
    dist= 2 * r * asin(sqrt(a))
    return dist

def create_distance(time_str:str):
    """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞"""
    try:
        #print(time_str)
        time=int(time_str)
        #print(time)
        if time<0:
            result='–í—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–º–µ–Ω—å—à–µ 0), –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ'
        elif time<5:
            result='–í—Ä–µ–º—è —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ (–º–µ–Ω—å—à–µ 5), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–∞'
        elif time<10:
            result=_create_detail_distance(1,3)
        elif time<20:
            result=_create_detail_distance(1,3)
        elif time<40:
            result=_create_detail_distance(2,5)
        else:
            result=_create_detail_distance(2,7)
        return result
    except:
        result='–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–∞—Ä—à—Ä—É—Ç –Ω–µ –±—ã–ª –ø–æ—Å—Ç—Ä–æ–µ–Ω!'
        return result

        
def _dist_to_string(place, dist):
    places_name=[]
    for i in range(0,len(place),+1):
        places_name.append(place[i][1])
    
    dist_name=gpt.prompt_distance_name(places_name)

    result=f'–ú–∞—Ä—à—Ä—É—Ç "{dist_name}": \n\n'
    count=len(place)


    for i in range(0,count,+1):
        result+=places.place_dbToString(place[i])
        #result+='\nüåê–ê–¥—Ä–µ—Å: '+geocoder.get_adress(float(str(place[i][5]).split()[0]),float(str(place[i][5]).split()[1]))
        if i+1<count:
            result+=f'\n\n–í—Ä–µ–º—è –Ω–∞ –¥–æ—Ä–æ–≥—É –º–µ–∂–¥—É –ø—É–Ω–∫—Ç–∞–º–∏ {i+1} –∏ {i+2}: '
            if dist[i]<=2:
                result+=str(int(dist[i]/5*60))
                result+=' –º–∏–Ω. –ø–µ—à–∫–æ–º\n\n'
            else:
                result+=str(int(dist[i]/20*60))
                result+=' –º–∏–Ω. –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ\n\n'
              
    return result

def _create_detail_distance(time:int,count:int):
    style=['–º—É–∑–µ–π','—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–ø–∞—Ä–∫']
    place=[]
    dist=[]
    for i in range(0,count,+1):
        #print('i='+str(i))
        #print(style[i%3]+'\n')
        #print(str(time)+'\n')
        if style[i%3]=='—Ä–µ—Å—Ç–æ—Ä–∞–Ω':
            place_arr=places.selectPlaces(1,str(style[i%3]),1)#–º–∞—Å—Å–∏–≤ –º–µ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        else:
            place_arr=places.selectPlaces(int(time),str(style[i%3]),1)#–º–∞—Å—Å–∏–≤ –º–µ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        place.append( place_arr[randrange(len(place_arr))] )#–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–µ–º
        if i>=1:
            #print('location : '+str(place[i][5]))
            loc2=str(place[i][5]).split()#–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            latitude2=float(loc2[0])
            longitude2=float(loc2[1])

            loc1=str(place[i-1][5]).split()#–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            latitude1=float(loc1[0])
            longitude1=float(loc1[1])

            dist.append(_distance(latitude1,longitude1,latitude2,longitude2))
    
    result=_dist_to_string(place,dist)

    return result
