import telebot
from telebot import types

import random
from random import randrange

import places_db_query as places, users_db_query as users #—Ñ–∞–π–ª—ã –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
import gpt #—Ñ–∞–π–ª —Å —á–∞—Ç–æ–∏ –≥–ø—Ç
import weather_forecast #–ø–æ–≥–æ–¥–∞ –ø–æ –∞–ø–∏
import distant #—Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è

bot=telebot.TeleBot('token')

def create_markup():
  markup = types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True)
  btn = types.KeyboardButton("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç")
  markup.add(btn)
  btn = types.KeyboardButton("–ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ")
  markup.add(btn)
  btn = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ")
  markup.add(btn)
  btn = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É")
  markup.add(btn)
  return markup

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def main (message):
  try:
    if(users.userNoExist(message.from_user.id)):
      users.addUser(message.from_user.id)

    bot.send_message(message.chat.id,f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø - —Ç–≥-–±–æ—Ç, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –ø–æ –¢—É–ª–µ –∏ –¢—É–ª—å—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏.')
     #–ø–æ–ª—É—á–∞–µ–º id –∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–¥
    us_id = message.from_user.id
    us_name = message.from_user.first_name
    
   # db_table_val(id=us_id, name=us_name)
   # conn.close()
    markup = create_markup()
    bot.send_message(message.chat.id, text="–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É –∏ —Å–∫–æ—Ä–µ–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Å—è –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!", reply_markup=markup)
    bot.register_next_step_handler(message, on_click_find_time)
  except:
    bot.send_message(message.chat.id, text="–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=types.ReplyKeyboardRemove())

#–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ "–Ω–∞–π—Ç–∏ –º–∞—Ä—à—Ä—É—Ç"  
#–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ "–Ω–∞–π—Ç–∏ –º–∞—Ä—à—Ä—É—Ç"  
@bot.message_handler(content_types=['text'])
def on_click_find_time(message):
  try:
    if message.text=="–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç":
      bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞:', reply_markup=types.ReplyKeyboardRemove())
      bot.register_next_step_handler(message, on_click_time_to_travel)
    elif message.text=="–ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ":
      keyboard = types.InlineKeyboardMarkup()
      one_k = types.InlineKeyboardButton(text='1-2—á', callback_data='1')
      two_k = types.InlineKeyboardButton(text='3-5—á', callback_data='2')
      three_k = types.InlineKeyboardButton(text='6—á –∏ –±–æ–ª–µ–µ', callback_data='3')
      four_k = types.InlineKeyboardButton(text='2 –¥–Ω—è', callback_data='4')
      keyboard.add(one_k,two_k, three_k)
      keyboard.add( four_k)
      bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ–±–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π:', reply_markup=keyboard)
      bot.register_next_step_handler(message, on_click_find_persons)
    elif message.text=="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É":
      result=weather_forecast.get_weather()
      markup=create_markup()
      bot.send_message(message.chat.id, text=result, reply_markup=markup)
    elif message.text=="–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ":
      bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞, –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º:', reply_markup=types.ReplyKeyboardRemove())
      bot.register_next_step_handler(message, on_click_add_suggest)
    else:#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      bot.send_message(message.chat.id,'<b>–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª</b>', parse_mode='html') 
  except:
    bot.send_message(message.chat.id, text="–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=types.ReplyKeyboardRemove())
     
def on_click_time_to_travel(message):#–ø–æ–¥–±–æ—Ä –º–µ—Å—Ç–∞
  try:
    bot.send_message(message.chat.id, 'üß≠–ü–æ–¥–±–∏—Ä–∞–µ–º –º–µ—Å—Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
    result=distant.create_distance(message.text)
    markup = create_markup()

    bot.send_message(message.chat.id, text=result, reply_markup=markup)
  except:
    bot.send_message(message.chat.id, text="–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=types.ReplyKeyboardRemove())

def on_click_add_suggest(message):
  try:
    text=''
    if(users.userNoExist(message.from_user.id)):
      users.addUser(message.from_user.id)
    elif(int(users.token(message.from_user.id))>0):
      users.reduceTokens(message.from_user.id)
      places.addSuggest(str(message.text))
      text='–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –º–∞—Ä—à—Ä—É—Ç—ã!'
    else:
      text='–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ–±—ä–µ–∫—Ç–æ–≤'
    markup = create_markup()
    
    bot.send_message(message.chat.id, text=text, reply_markup=markup)
  except:
    bot.send_message(message.chat.id, text="–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=types.ReplyKeyboardRemove())
    

@bot.callback_query_handler(func=lambda call: True)
def on_click_find_persons(call):
  try:
    if call.data[0]=='f':
      if(users.userNoExist(call.from_user.id)):
        print(call)
        print(call.from_user.id)
        users.addUser(call.from_user.id)
      else:
        history=int(call.data.replace('f','',1))
        users.changeHistory(call.from_user.id, history)
        print(history)
      murkup=create_markup()
      bot.send_message(call.message.chat.id, '–í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', reply_markup=murkup)
    elif len(call.data)==1:
      keyboard = types.InlineKeyboardMarkup()
      one_k = types.InlineKeyboardButton(text='–æ–¥–∏–Ω', callback_data=str(call.data)+'1')
      two_k = types.InlineKeyboardButton(text='–ø–∞—Ä–∞', callback_data=str(call.data)+'2')
      three_k = types.InlineKeyboardButton(text='—Å –¥–µ—Ç—å–º–∏', callback_data=str(call.data)+'3')
      four_k = types.InlineKeyboardButton(text='–∫–æ–º–ø–∞–Ω–∏—è', callback_data=str(call.data)+'4')

      keyboard.add(one_k, two_k)
      keyboard.add(three_k, four_k)
      bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –∫–æ–º–ø–∞–Ω–∏—é:', reply_markup=keyboard)
    
    elif len(call.data)==2:
      keyboard = types.InlineKeyboardMarkup()
      one_k = types.InlineKeyboardButton(text='–ø–∞—Ä–∫', callback_data=str(call.data)+'1')#–ø–∞—Ä–∫
      two_k = types.InlineKeyboardButton(text='–º—É–∑–µ–π', callback_data=str(call.data)+'2')#–º—É–∑–µ–π
      three_k = types.InlineKeyboardButton(text='–∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö', callback_data=str(call.data)+'3')#–∞–∫—Ç–∏–≤

      keyboard.add(one_k, two_k)
      keyboard.add(three_k)
      bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–∏–ø –æ—Ç–¥—ã—Ö–∞:', reply_markup=keyboard)\

    else:
      bot.send_message(call.message.chat.id, 'üß≠–ü–æ–¥–±–∏—Ä–∞–µ–º –º–µ—Å—Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')

      time=str(call.data)[0]
      persons=str(call.data)[1]
      arrStyle=['–ø–∞—Ä–∫', '–º—É–∑–µ–π', '–∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö']
      #print(arrStyle[1])
      style=arrStyle[int(call.data[2])-1]


      arrPlaces=places.selectPlaces(time,style,persons)#array of places
      if len(arrPlaces)==0: arrPlaces=places.selectPlaces(2,'–ø–∞—Ä–∫',1)#array of places
      result_tuple=arrPlaces[randrange(len(arrPlaces))]
      result=places.place_dbToString(result_tuple)
      result+="\nüìÉ–û–ø–∏—Å–∞–Ω–∏–µ: "+gpt.prompt(result_tuple[1])#–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≤ —á–∞—Ç –≥–ø—Ç

      loc=str(result_tuple[5]).split()#–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      latitude=float(loc[0])
      longitude=float(loc[1])

      keyboard = types.InlineKeyboardMarkup()
      one_k = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', callback_data='f'+str(result_tuple[0]))#–¥–æ–±–∞–≤–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é id
      keyboard.add(one_k)
      bot.send_message(call.message.chat.id, str(result),reply_markup=keyboard)#–æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è

      markup = create_markup()
      bot.send_location(call.message.chat.id, latitude=latitude,longitude=longitude,reply_markup=markup)#–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ

    
  except:
    on_click_find_time(call)

@bot.message_handler(content_types=['location'])
def handle_loc(message):
  try:
    bot.send_message(message.chat.id, text="–¢–µ–ø–µ—Ä—å –º—ã –∑–Ω–∞–µ–º –≥–¥–µ —Ç—ã, –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –§–°–ë )))))", reply_markup=create_markup())
  except:
    bot.send_message(message.chat.id, text="–£–ø—Å... —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=types.ReplyKeyboardRemove())
    
bot.polling(non_stop=True)
    